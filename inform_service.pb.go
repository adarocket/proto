// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: inform_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SaveStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SaveStatisticResponse) Reset() {
	*x = SaveStatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStatisticResponse) ProtoMessage() {}

func (x *SaveStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStatisticResponse.ProtoReflect.Descriptor instead.
func (*SaveStatisticResponse) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{0}
}

func (x *SaveStatisticResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatisticRequest) Reset() {
	*x = GetStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatisticRequest) ProtoMessage() {}

func (x *GetStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatisticRequest.ProtoReflect.Descriptor instead.
func (*GetStatisticRequest) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{1}
}

type SaveStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAuthData *NodeAuthData `protobuf:"bytes,1,opt,name=node_auth_data,json=nodeAuthData,proto3" json:"node_auth_data,omitempty"`
	Statistic    *Statistic    `protobuf:"bytes,2,opt,name=statistic,proto3" json:"statistic,omitempty"`
}

func (x *SaveStatisticRequest) Reset() {
	*x = SaveStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStatisticRequest) ProtoMessage() {}

func (x *SaveStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStatisticRequest.ProtoReflect.Descriptor instead.
func (*SaveStatisticRequest) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{2}
}

func (x *SaveStatisticRequest) GetNodeAuthData() *NodeAuthData {
	if x != nil {
		return x.NodeAuthData
	}
	return nil
}

func (x *SaveStatisticRequest) GetStatistic() *Statistic {
	if x != nil {
		return x.Statistic
	}
	return nil
}

type GetStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAuthData *NodeAuthData `protobuf:"bytes,1,opt,name=node_auth_data,json=nodeAuthData,proto3" json:"node_auth_data,omitempty"`
	Statistic    []*Statistic  `protobuf:"bytes,2,rep,name=statistic,proto3" json:"statistic,omitempty"`
}

func (x *GetStatisticResponse) Reset() {
	*x = GetStatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatisticResponse) ProtoMessage() {}

func (x *GetStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatisticResponse.ProtoReflect.Descriptor instead.
func (*GetStatisticResponse) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatisticResponse) GetNodeAuthData() *NodeAuthData {
	if x != nil {
		return x.NodeAuthData
	}
	return nil
}

func (x *GetStatisticResponse) GetStatistic() []*Statistic {
	if x != nil {
		return x.Statistic
	}
	return nil
}

type Statistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// every 3600 seconds
	NodeBasicData   *NodeBasicData   `protobuf:"bytes,1,opt,name=node_basic_data,json=nodeBasicData,proto3" json:"node_basic_data,omitempty"`
	ServerBasicData *ServerBasicData `protobuf:"bytes,2,opt,name=server_basic_data,json=serverBasicData,proto3" json:"server_basic_data,omitempty"`
	Epoch           *Epoch           `protobuf:"bytes,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	KesData         *KESData         `protobuf:"bytes,4,opt,name=kes_data,json=kesData,proto3" json:"kes_data,omitempty"`
	Blocks          *Blocks          `protobuf:"bytes,5,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Updates         *Updates         `protobuf:"bytes,6,opt,name=updates,proto3" json:"updates,omitempty"`
	Security        *Security        `protobuf:"bytes,7,opt,name=security,proto3" json:"security,omitempty"`
	StakeInfo       *StakeInfo       `protobuf:"bytes,8,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info,omitempty"`
	// every 10 seconds
	Online          *Online          `protobuf:"bytes,9,opt,name=online,proto3" json:"online,omitempty"`
	MemoryState     *MemoryState     `protobuf:"bytes,10,opt,name=memory_state,json=memoryState,proto3" json:"memory_state,omitempty"`
	CpuState        *CPUState        `protobuf:"bytes,11,opt,name=cpu_state,json=cpuState,proto3" json:"cpu_state,omitempty"`
	NodeState       *NodeState       `protobuf:"bytes,12,opt,name=node_state,json=nodeState,proto3" json:"node_state,omitempty"`
	NodePerformance *NodePerformance `protobuf:"bytes,13,opt,name=node_performance,json=nodePerformance,proto3" json:"node_performance,omitempty"`
}

func (x *Statistic) Reset() {
	*x = Statistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistic) ProtoMessage() {}

func (x *Statistic) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistic.ProtoReflect.Descriptor instead.
func (*Statistic) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{4}
}

func (x *Statistic) GetNodeBasicData() *NodeBasicData {
	if x != nil {
		return x.NodeBasicData
	}
	return nil
}

func (x *Statistic) GetServerBasicData() *ServerBasicData {
	if x != nil {
		return x.ServerBasicData
	}
	return nil
}

func (x *Statistic) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *Statistic) GetKesData() *KESData {
	if x != nil {
		return x.KesData
	}
	return nil
}

func (x *Statistic) GetBlocks() *Blocks {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Statistic) GetUpdates() *Updates {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *Statistic) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Statistic) GetStakeInfo() *StakeInfo {
	if x != nil {
		return x.StakeInfo
	}
	return nil
}

func (x *Statistic) GetOnline() *Online {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *Statistic) GetMemoryState() *MemoryState {
	if x != nil {
		return x.MemoryState
	}
	return nil
}

func (x *Statistic) GetCpuState() *CPUState {
	if x != nil {
		return x.CpuState
	}
	return nil
}

func (x *Statistic) GetNodeState() *NodeState {
	if x != nil {
		return x.NodeState
	}
	return nil
}

func (x *Statistic) GetNodePerformance() *NodePerformance {
	if x != nil {
		return x.NodePerformance
	}
	return nil
}

type NodeAuthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *NodeAuthData) Reset() {
	*x = NodeAuthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAuthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAuthData) ProtoMessage() {}

func (x *NodeAuthData) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAuthData.ProtoReflect.Descriptor instead.
func (*NodeAuthData) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{5}
}

func (x *NodeAuthData) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *NodeAuthData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Node basic data - server, rare (every 3600 seconds), basic perm
type NodeBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker      string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Location    string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	NodeVersion string `protobuf:"bytes,4,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *NodeBasicData) Reset() {
	*x = NodeBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeBasicData) ProtoMessage() {}

func (x *NodeBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeBasicData.ProtoReflect.Descriptor instead.
func (*NodeBasicData) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{6}
}

func (x *NodeBasicData) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *NodeBasicData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeBasicData) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *NodeBasicData) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

// Server basic data - server, rare (every 3600 seconds), basic perm
type ServerBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4         string `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6         string `protobuf:"bytes,2,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	LinuxName    string `protobuf:"bytes,3,opt,name=linux_name,json=linuxName,proto3" json:"linux_name,omitempty"`
	LinuxVersion string `protobuf:"bytes,4,opt,name=linux_version,json=linuxVersion,proto3" json:"linux_version,omitempty"`
}

func (x *ServerBasicData) Reset() {
	*x = ServerBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerBasicData) ProtoMessage() {}

func (x *ServerBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerBasicData.ProtoReflect.Descriptor instead.
func (*ServerBasicData) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{7}
}

func (x *ServerBasicData) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *ServerBasicData) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *ServerBasicData) GetLinuxName() string {
	if x != nil {
		return x.LinuxName
	}
	return ""
}

func (x *ServerBasicData) GetLinuxVersion() string {
	if x != nil {
		return x.LinuxVersion
	}
	return ""
}

// Online server, frequent (every 10 seconds), basic perm
type Online struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinceStart      int64 `protobuf:"varint,1,opt,name=since_start,json=sinceStart,proto3" json:"since_start,omitempty"`
	Pings           int64 `protobuf:"varint,2,opt,name=pings,proto3" json:"pings,omitempty"`
	NodeActive      bool  `protobuf:"varint,3,opt,name=node_active,json=nodeActive,proto3" json:"node_active,omitempty"`
	NodeActivePings int64 `protobuf:"varint,4,opt,name=node_active_pings,json=nodeActivePings,proto3" json:"node_active_pings,omitempty"`
}

func (x *Online) Reset() {
	*x = Online{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Online) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Online) ProtoMessage() {}

func (x *Online) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Online.ProtoReflect.Descriptor instead.
func (*Online) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{8}
}

func (x *Online) GetSinceStart() int64 {
	if x != nil {
		return x.SinceStart
	}
	return 0
}

func (x *Online) GetPings() int64 {
	if x != nil {
		return x.Pings
	}
	return 0
}

func (x *Online) GetNodeActive() bool {
	if x != nil {
		return x.NodeActive
	}
	return false
}

func (x *Online) GetNodeActivePings() int64 {
	if x != nil {
		return x.NodeActivePings
	}
	return 0
}

// Memory state - server, frequent (every 10 seconds), server_technical perm
type MemoryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total               uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Used                uint64 `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
	Buffers             uint64 `protobuf:"varint,3,opt,name=buffers,proto3" json:"buffers,omitempty"`
	Cached              uint64 `protobuf:"varint,4,opt,name=cached,proto3" json:"cached,omitempty"`
	Free                uint64 `protobuf:"varint,5,opt,name=free,proto3" json:"free,omitempty"`
	Available           uint64 `protobuf:"varint,6,opt,name=available,proto3" json:"available,omitempty"`
	Active              uint64 `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	Inactive            uint64 `protobuf:"varint,8,opt,name=inactive,proto3" json:"inactive,omitempty"`
	SwapTotal           uint64 `protobuf:"varint,9,opt,name=swap_total,json=swapTotal,proto3" json:"swap_total,omitempty"`
	SwapUsed            uint64 `protobuf:"varint,10,opt,name=swap_used,json=swapUsed,proto3" json:"swap_used,omitempty"`
	SwapCached          uint64 `protobuf:"varint,11,opt,name=swap_cached,json=swapCached,proto3" json:"swap_cached,omitempty"`
	SwapFree            uint64 `protobuf:"varint,12,opt,name=swap_free,json=swapFree,proto3" json:"swap_free,omitempty"`
	MemAvailableEnabled bool   `protobuf:"varint,13,opt,name=mem_available_enabled,json=memAvailableEnabled,proto3" json:"mem_available_enabled,omitempty"`
}

func (x *MemoryState) Reset() {
	*x = MemoryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryState) ProtoMessage() {}

func (x *MemoryState) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryState.ProtoReflect.Descriptor instead.
func (*MemoryState) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{9}
}

func (x *MemoryState) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryState) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *MemoryState) GetBuffers() uint64 {
	if x != nil {
		return x.Buffers
	}
	return 0
}

func (x *MemoryState) GetCached() uint64 {
	if x != nil {
		return x.Cached
	}
	return 0
}

func (x *MemoryState) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *MemoryState) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *MemoryState) GetActive() uint64 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *MemoryState) GetInactive() uint64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *MemoryState) GetSwapTotal() uint64 {
	if x != nil {
		return x.SwapTotal
	}
	return 0
}

func (x *MemoryState) GetSwapUsed() uint64 {
	if x != nil {
		return x.SwapUsed
	}
	return 0
}

func (x *MemoryState) GetSwapCached() uint64 {
	if x != nil {
		return x.SwapCached
	}
	return 0
}

func (x *MemoryState) GetSwapFree() uint64 {
	if x != nil {
		return x.SwapFree
	}
	return 0
}

func (x *MemoryState) GetMemAvailableEnabled() bool {
	if x != nil {
		return x.MemAvailableEnabled
	}
	return false
}

// CPU state - server, frequent (every 10 seconds), server_technical perm
type CPUState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuQty          int64   `protobuf:"varint,1,opt,name=cpu_qty,json=cpuQty,proto3" json:"cpu_qty,omitempty"`
	AverageWorkload float32 `protobuf:"fixed32,2,opt,name=average_workload,json=averageWorkload,proto3" json:"average_workload,omitempty"`
}

func (x *CPUState) Reset() {
	*x = CPUState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUState) ProtoMessage() {}

func (x *CPUState) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUState.ProtoReflect.Descriptor instead.
func (*CPUState) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{10}
}

func (x *CPUState) GetCpuQty() int64 {
	if x != nil {
		return x.CpuQty
	}
	return 0
}

func (x *CPUState) GetAverageWorkload() float32 {
	if x != nil {
		return x.AverageWorkload
	}
	return 0
}

// Epoch - node, rare (every 3600 seconds), node_technical perm
type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{11}
}

func (x *Epoch) GetEpochNumber() int64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

// Node state - node, frequent (every 10 seconds), node_technical perm
type NodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipDiff int64   `protobuf:"varint,1,opt,name=tip_diff,json=tipDiff,proto3" json:"tip_diff,omitempty"`
	Density float32 `protobuf:"fixed32,2,opt,name=density,proto3" json:"density,omitempty"`
}

func (x *NodeState) Reset() {
	*x = NodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState) ProtoMessage() {}

func (x *NodeState) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState.ProtoReflect.Descriptor instead.
func (*NodeState) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{12}
}

func (x *NodeState) GetTipDiff() int64 {
	if x != nil {
		return x.TipDiff
	}
	return 0
}

func (x *NodeState) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

// Node performance - node, frequent (every 10 seconds), node_technical perm
type NodePerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessedTx int64 `protobuf:"varint,1,opt,name=processed_tx,json=processedTx,proto3" json:"processed_tx,omitempty"`
	PeersIn     int64 `protobuf:"varint,2,opt,name=peers_in,json=peersIn,proto3" json:"peers_in,omitempty"`
	PeersOut    int64 `protobuf:"varint,3,opt,name=peers_out,json=peersOut,proto3" json:"peers_out,omitempty"`
}

func (x *NodePerformance) Reset() {
	*x = NodePerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePerformance) ProtoMessage() {}

func (x *NodePerformance) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePerformance.ProtoReflect.Descriptor instead.
func (*NodePerformance) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{13}
}

func (x *NodePerformance) GetProcessedTx() int64 {
	if x != nil {
		return x.ProcessedTx
	}
	return 0
}

func (x *NodePerformance) GetPeersIn() int64 {
	if x != nil {
		return x.PeersIn
	}
	return 0
}

func (x *NodePerformance) GetPeersOut() int64 {
	if x != nil {
		return x.PeersOut
	}
	return 0
}

// KES data - node, rare (every 3600 seconds), node_technical perm
type KESData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KesCurrent   int64  `protobuf:"varint,1,opt,name=kes_current,json=kesCurrent,proto3" json:"kes_current,omitempty"`
	KesRemaining int64  `protobuf:"varint,2,opt,name=kes_remaining,json=kesRemaining,proto3" json:"kes_remaining,omitempty"`
	KesExpDate   string `protobuf:"bytes,3,opt,name=kes_exp_date,json=kesExpDate,proto3" json:"kes_exp_date,omitempty"`
}

func (x *KESData) Reset() {
	*x = KESData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KESData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KESData) ProtoMessage() {}

func (x *KESData) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KESData.ProtoReflect.Descriptor instead.
func (*KESData) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{14}
}

func (x *KESData) GetKesCurrent() int64 {
	if x != nil {
		return x.KesCurrent
	}
	return 0
}

func (x *KESData) GetKesRemaining() int64 {
	if x != nil {
		return x.KesRemaining
	}
	return 0
}

func (x *KESData) GetKesExpDate() string {
	if x != nil {
		return x.KesExpDate
	}
	return ""
}

// Blocks - node, rare (every 3600 seconds), node_financial perm
type Blocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockLeader  int64 `protobuf:"varint,1,opt,name=block_leader,json=blockLeader,proto3" json:"block_leader,omitempty"`
	BlockAdopted int64 `protobuf:"varint,2,opt,name=block_adopted,json=blockAdopted,proto3" json:"block_adopted,omitempty"`
	BlockInvalid int64 `protobuf:"varint,3,opt,name=block_invalid,json=blockInvalid,proto3" json:"block_invalid,omitempty"`
}

func (x *Blocks) Reset() {
	*x = Blocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blocks) ProtoMessage() {}

func (x *Blocks) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blocks.ProtoReflect.Descriptor instead.
func (*Blocks) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{15}
}

func (x *Blocks) GetBlockLeader() int64 {
	if x != nil {
		return x.BlockLeader
	}
	return 0
}

func (x *Blocks) GetBlockAdopted() int64 {
	if x != nil {
		return x.BlockAdopted
	}
	return 0
}

func (x *Blocks) GetBlockInvalid() int64 {
	if x != nil {
		return x.BlockInvalid
	}
	return 0
}

// Updates - server, rare (every 3600 seconds), server_technical perm
type Updates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InformerActual    string `protobuf:"bytes,1,opt,name=informer_actual,json=informerActual,proto3" json:"informer_actual,omitempty"`
	InformerAvailable string `protobuf:"bytes,2,opt,name=informer_available,json=informerAvailable,proto3" json:"informer_available,omitempty"`
	UpdaterActual     string `protobuf:"bytes,3,opt,name=updater_actual,json=updaterActual,proto3" json:"updater_actual,omitempty"`
	UpdaterAvailable  string `protobuf:"bytes,4,opt,name=updater_available,json=updaterAvailable,proto3" json:"updater_available,omitempty"`
	PackagesAvailable int64  `protobuf:"varint,5,opt,name=packages_available,json=packagesAvailable,proto3" json:"packages_available,omitempty"`
}

func (x *Updates) Reset() {
	*x = Updates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Updates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Updates) ProtoMessage() {}

func (x *Updates) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Updates.ProtoReflect.Descriptor instead.
func (*Updates) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{16}
}

func (x *Updates) GetInformerActual() string {
	if x != nil {
		return x.InformerActual
	}
	return ""
}

func (x *Updates) GetInformerAvailable() string {
	if x != nil {
		return x.InformerAvailable
	}
	return ""
}

func (x *Updates) GetUpdaterActual() string {
	if x != nil {
		return x.UpdaterActual
	}
	return ""
}

func (x *Updates) GetUpdaterAvailable() string {
	if x != nil {
		return x.UpdaterAvailable
	}
	return ""
}

func (x *Updates) GetPackagesAvailable() int64 {
	if x != nil {
		return x.PackagesAvailable
	}
	return 0
}

// Security - server, rare (every 3600 seconds), server_technical perm
type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshAttackAttempts         int64 `protobuf:"varint,1,opt,name=ssh_attack_attempts,json=sshAttackAttempts,proto3" json:"ssh_attack_attempts,omitempty"`
	SecurityPackagesAvailable int64 `protobuf:"varint,2,opt,name=security_packages_available,json=securityPackagesAvailable,proto3" json:"security_packages_available,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{17}
}

func (x *Security) GetSshAttackAttempts() int64 {
	if x != nil {
		return x.SshAttackAttempts
	}
	return 0
}

func (x *Security) GetSecurityPackagesAvailable() int64 {
	if x != nil {
		return x.SecurityPackagesAvailable
	}
	return 0
}

// Stake info -  node, rare (every 3600 seconds), node_financial perm
type StakeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveStake   int64 `protobuf:"varint,1,opt,name=live_stake,json=liveStake,proto3" json:"live_stake,omitempty"`
	ActiveStake int64 `protobuf:"varint,2,opt,name=active_stake,json=activeStake,proto3" json:"active_stake,omitempty"`
	Pledge      int64 `protobuf:"varint,3,opt,name=pledge,proto3" json:"pledge,omitempty"`
}

func (x *StakeInfo) Reset() {
	*x = StakeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inform_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeInfo) ProtoMessage() {}

func (x *StakeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inform_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeInfo.ProtoReflect.Descriptor instead.
func (*StakeInfo) Descriptor() ([]byte, []int) {
	return file_inform_service_proto_rawDescGZIP(), []int{18}
}

func (x *StakeInfo) GetLiveStake() int64 {
	if x != nil {
		return x.LiveStake
	}
	return 0
}

func (x *StakeInfo) GetActiveStake() int64 {
	if x != nil {
		return x.ActiveStake
	}
	return 0
}

func (x *StakeInfo) GetPledge() int64 {
	if x != nil {
		return x.Pledge
	}
	return 0
}

var File_inform_service_proto protoreflect.FileDescriptor

var file_inform_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a,
	0x15, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x15,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x8b, 0x05,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x29, 0x0a, 0x08, 0x6b, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x45, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x6b, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xfd, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x65,
	0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x4e, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x70, 0x75, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x70, 0x75, 0x51, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x2a, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x40, 0x0a,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69,
	0x70, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x70, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22,
	0x6c, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x71, 0x0a,
	0x07, 0x4b, 0x45, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x73, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6b,
	0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x0a, 0x0c, 0x6b, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x73, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x75, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x6f, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x7a,
	0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x73,
	0x68, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x73, 0x68, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x32, 0x98, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inform_service_proto_rawDescOnce sync.Once
	file_inform_service_proto_rawDescData = file_inform_service_proto_rawDesc
)

func file_inform_service_proto_rawDescGZIP() []byte {
	file_inform_service_proto_rawDescOnce.Do(func() {
		file_inform_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_inform_service_proto_rawDescData)
	})
	return file_inform_service_proto_rawDescData
}

var file_inform_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_inform_service_proto_goTypes = []interface{}{
	(*SaveStatisticResponse)(nil), // 0: proto.SaveStatisticResponse
	(*GetStatisticRequest)(nil),   // 1: proto.GetStatisticRequest
	(*SaveStatisticRequest)(nil),  // 2: proto.SaveStatisticRequest
	(*GetStatisticResponse)(nil),  // 3: proto.GetStatisticResponse
	(*Statistic)(nil),             // 4: proto.Statistic
	(*NodeAuthData)(nil),          // 5: proto.NodeAuthData
	(*NodeBasicData)(nil),         // 6: proto.NodeBasicData
	(*ServerBasicData)(nil),       // 7: proto.ServerBasicData
	(*Online)(nil),                // 8: proto.Online
	(*MemoryState)(nil),           // 9: proto.MemoryState
	(*CPUState)(nil),              // 10: proto.CPUState
	(*Epoch)(nil),                 // 11: proto.Epoch
	(*NodeState)(nil),             // 12: proto.NodeState
	(*NodePerformance)(nil),       // 13: proto.NodePerformance
	(*KESData)(nil),               // 14: proto.KESData
	(*Blocks)(nil),                // 15: proto.Blocks
	(*Updates)(nil),               // 16: proto.Updates
	(*Security)(nil),              // 17: proto.Security
	(*StakeInfo)(nil),             // 18: proto.StakeInfo
}
var file_inform_service_proto_depIdxs = []int32{
	5,  // 0: proto.SaveStatisticRequest.node_auth_data:type_name -> proto.NodeAuthData
	4,  // 1: proto.SaveStatisticRequest.statistic:type_name -> proto.Statistic
	5,  // 2: proto.GetStatisticResponse.node_auth_data:type_name -> proto.NodeAuthData
	4,  // 3: proto.GetStatisticResponse.statistic:type_name -> proto.Statistic
	6,  // 4: proto.Statistic.node_basic_data:type_name -> proto.NodeBasicData
	7,  // 5: proto.Statistic.server_basic_data:type_name -> proto.ServerBasicData
	11, // 6: proto.Statistic.epoch:type_name -> proto.Epoch
	14, // 7: proto.Statistic.kes_data:type_name -> proto.KESData
	15, // 8: proto.Statistic.blocks:type_name -> proto.Blocks
	16, // 9: proto.Statistic.updates:type_name -> proto.Updates
	17, // 10: proto.Statistic.security:type_name -> proto.Security
	18, // 11: proto.Statistic.stake_info:type_name -> proto.StakeInfo
	8,  // 12: proto.Statistic.online:type_name -> proto.Online
	9,  // 13: proto.Statistic.memory_state:type_name -> proto.MemoryState
	10, // 14: proto.Statistic.cpu_state:type_name -> proto.CPUState
	12, // 15: proto.Statistic.node_state:type_name -> proto.NodeState
	13, // 16: proto.Statistic.node_performance:type_name -> proto.NodePerformance
	2,  // 17: proto.Informer.SaveStatistic:input_type -> proto.SaveStatisticRequest
	1,  // 18: proto.Informer.GetStatistic:input_type -> proto.GetStatisticRequest
	0,  // 19: proto.Informer.SaveStatistic:output_type -> proto.SaveStatisticResponse
	4,  // 20: proto.Informer.GetStatistic:output_type -> proto.Statistic
	19, // [19:21] is the sub-list for method output_type
	17, // [17:19] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_inform_service_proto_init() }
func file_inform_service_proto_init() {
	if File_inform_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inform_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAuthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Online); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KESData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Updates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inform_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inform_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inform_service_proto_goTypes,
		DependencyIndexes: file_inform_service_proto_depIdxs,
		MessageInfos:      file_inform_service_proto_msgTypes,
	}.Build()
	File_inform_service_proto = out.File
	file_inform_service_proto_rawDesc = nil
	file_inform_service_proto_goTypes = nil
	file_inform_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InformerClient is the client API for Informer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InformerClient interface {
	SaveStatistic(ctx context.Context, in *SaveStatisticRequest, opts ...grpc.CallOption) (*SaveStatisticResponse, error)
	GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*Statistic, error)
}

type informerClient struct {
	cc grpc.ClientConnInterface
}

func NewInformerClient(cc grpc.ClientConnInterface) InformerClient {
	return &informerClient{cc}
}

func (c *informerClient) SaveStatistic(ctx context.Context, in *SaveStatisticRequest, opts ...grpc.CallOption) (*SaveStatisticResponse, error) {
	out := new(SaveStatisticResponse)
	err := c.cc.Invoke(ctx, "/proto.Informer/SaveStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informerClient) GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, "/proto.Informer/GetStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformerServer is the server API for Informer service.
type InformerServer interface {
	SaveStatistic(context.Context, *SaveStatisticRequest) (*SaveStatisticResponse, error)
	GetStatistic(context.Context, *GetStatisticRequest) (*Statistic, error)
}

// UnimplementedInformerServer can be embedded to have forward compatible implementations.
type UnimplementedInformerServer struct {
}

func (*UnimplementedInformerServer) SaveStatistic(context.Context, *SaveStatisticRequest) (*SaveStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStatistic not implemented")
}
func (*UnimplementedInformerServer) GetStatistic(context.Context, *GetStatisticRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}

func RegisterInformerServer(s *grpc.Server, srv InformerServer) {
	s.RegisterService(&_Informer_serviceDesc, srv)
}

func _Informer_SaveStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformerServer).SaveStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Informer/SaveStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformerServer).SaveStatistic(ctx, req.(*SaveStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Informer_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformerServer).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Informer/GetStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformerServer).GetStatistic(ctx, req.(*GetStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Informer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Informer",
	HandlerType: (*InformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveStatistic",
			Handler:    _Informer_SaveStatistic_Handler,
		},
		{
			MethodName: "GetStatistic",
			Handler:    _Informer_GetStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inform_service.proto",
}
