syntax = "proto3";

// option go_package = "/proto-gen/model";
// option go_package = "model";

// option go_package = "../../proto-gen/common";
// option go_package = "~/projects/adarocket/proto-gen/common";

option go_package = "github.com/adarocket/proto/proto-gen/common";

// github.com/adarocket/proto/proto-gen/common

// option go_package = "github.com/adarocket/proto/common";

// package proto;
package Common;


service Controller {
    rpc GetNodeList(GetNodeListRequest) returns (GetNodeListResponse) {}
}

message GetNodeListRequest {}

message GetNodeListResponse {
    repeated NodeAuthData node_auth_data = 1;
}


message NodeAuthData {
    string ticker = 1;
    string uuid = 2;
    string status = 3;

    string blockchain = 4;

    string type = 5;
    string name = 6;
}

// Node basic data - server, rare (every 3600 seconds), basic perm
message NodeBasicData {
    string ticker = 1;
    string type = 2;
    string location = 3;
    string node_version = 4; //+
}

// Server basic data - server, rare (every 3600 seconds), basic perm
message ServerBasicData {
    string ipv4 = 1;
    string ipv6 = 2;
    string linux_name = 3;
    string linux_version = 4; //+
}

// Online server, frequent (every 10 seconds), basic perm
message Online {
    int64 since_start = 1;
    int64 pings = 2; //++
    bool  node_active = 3; //++
    int64 node_active_pings = 4; //++
    bool  server_active = 5; //++
}

// Memory state - server, frequent (every 10 seconds), server_technical perm
message MemoryState {
    uint64 total = 1;
    uint64 used = 2;
    uint64 buffers = 3;
    uint64 cached = 4;
    uint64 free = 5;
    uint64 available = 6;
    uint64 active = 7;
    uint64 inactive = 8;
    uint64 swap_total = 9;
    uint64 swap_used = 10;
    uint64 swap_cached= 11;
    uint64 swap_free = 12;
    bool mem_available_enabled = 13;
}

// CPU state - server, frequent (every 10 seconds), server_technical perm
message CPUState  {
    int64 cpu_qty = 1;
    float average_workload = 2;
}

// Updates - server, rare (every 3600 seconds), server_technical perm
message Updates {
    string informer_actual = 1;
    string informer_available = 2;
    string updater_actual = 3;
    string updater_available = 4;
    int64 packages_available = 5;
}

// Security - server, rare (every 3600 seconds), server_technical perm
message Security {
    int64 ssh_attack_attempts = 1;
    int64 security_packages_available = 2;
}

// service Informer {
//     rpc SaveStatistic(SaveStatisticRequest) returns (SaveStatisticResponse) {}

//     rpc GetNodeList(GetNodeListRequest) returns (GetNodeListResponse) {}
//     rpc GetStatistic(GetStatisticRequest) returns (SaveStatisticRequest) {}
// }

// message SaveStatisticRequest {
//     NodeAuthData node_auth_data = 1;
//     Statistic statistic = 2;
// }

// message SaveStatisticResponse {
//     string status = 1;
// }

// message GetNodeListRequest {}

// message GetNodeListResponse {
//     repeated NodeAuthData node_auth_data = 1;
// }

// message GetStatisticRequest {
//     string uuid = 1;
// }

// message GetStatisticResponse {
//     NodeAuthData node_auth_data = 1;
//     repeated Statistic statistic = 2;
// }

// message Statistic {
//     // every 3600 seconds
//     // Common
//     NodeBasicData  node_basic_data = 1;
//     ServerBasicData server_basic_data = 2;
//     Updates updates = 3;
//     Security security = 4;

//     // Cardano blockchain
//     Epoch epoch = 5;
//     KESData kes_data = 6;
//     Blocks blocks = 7;
//     StakeInfo stake_info = 8;

//     // every 10 seconds
//     // Common
//     Online online = 9;
//     MemoryState memory_state = 10;
//     CPUState cpu_state = 11;

//     // Cardano blockchain
//     NodeState node_state = 12;
//     NodePerformance node_performance = 13;

//     // Chia blockchain
//     ChiaNodeFarming chia_node_farming = 14;

// }

// // Epoch - node, rare (every 3600 seconds), node_technical perm
// message Epoch  {
//     int64 epoch_number = 1;
// }

// // Node state - node, frequent (every 10 seconds), node_technical perm
// message NodeState {
//     int64 tip_diff = 1;
//     float density = 2;
// }

// // Node performance - node, frequent (every 10 seconds), node_technical perm
// message NodePerformance {
//     // !!!!!!
//     int64 processed_tx = 1; // ++ >0 должно увеличиваться 
//     int64 peers_in = 2; //++ >=1
//     int64 peers_out = 3; //++ >=1
// }

// // KES data - node, rare (every 3600 seconds), node_technical perm
// message KESData {
//     int64 kes_current = 1;
//     int64 kes_remaining = 2;
//     string kes_exp_date = 3; // ++
// }

// // Blocks - node, rare (every 3600 seconds), node_financial perm
// message Blocks {
//     int64 block_leader = 1; // ++ если увеличился, то нужно оповестить 
//     int64 block_adopted = 2; // ++
//     int64 block_invalid = 3;
// }

// // Stake info -  node, rare (every 3600 seconds), node_financial perm
// message StakeInfo {
//     // ++ 
//     // отслеживать изменение 
//     int64 live_stake = 1;
//     int64 active_stake = 2;
//     int64 pledge = 3;
// }

// // Chia node farming -  node, rare (every 3600 seconds), node_financial perm
// message ChiaNodeFarming {
//     string farming_status = 1; // ++
//     float total_chia_farmed = 2; // ++ изменения
//     float user_transaction_fees = 3;
//     float block_rewards = 4;

//     uint64 last_height_farmed = 5;
//     uint64 plot_count = 6; // ++ изменения

//     uint64 total_size_of_plots = 7; // ++ изменения
//     uint64 estimated_network_space = 8;

//     string expected_time_to_win = 9;
// }

