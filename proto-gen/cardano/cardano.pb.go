// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: cardano/cardano.proto

package cardano

import (
	common "github.com/adarocket/proto/proto-gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SaveStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAuthData *common.NodeAuthData `protobuf:"bytes,1,opt,name=node_auth_data,json=nodeAuthData,proto3" json:"node_auth_data,omitempty"`
	Statistic    *Statistic           `protobuf:"bytes,2,opt,name=statistic,proto3" json:"statistic,omitempty"`
}

func (x *SaveStatisticRequest) Reset() {
	*x = SaveStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStatisticRequest) ProtoMessage() {}

func (x *SaveStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStatisticRequest.ProtoReflect.Descriptor instead.
func (*SaveStatisticRequest) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{0}
}

func (x *SaveStatisticRequest) GetNodeAuthData() *common.NodeAuthData {
	if x != nil {
		return x.NodeAuthData
	}
	return nil
}

func (x *SaveStatisticRequest) GetStatistic() *Statistic {
	if x != nil {
		return x.Statistic
	}
	return nil
}

type SaveStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SaveStatisticResponse) Reset() {
	*x = SaveStatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStatisticResponse) ProtoMessage() {}

func (x *SaveStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStatisticResponse.ProtoReflect.Descriptor instead.
func (*SaveStatisticResponse) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{1}
}

func (x *SaveStatisticResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetStatisticRequest) Reset() {
	*x = GetStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatisticRequest) ProtoMessage() {}

func (x *GetStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatisticRequest.ProtoReflect.Descriptor instead.
func (*GetStatisticRequest) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{2}
}

func (x *GetStatisticRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Statistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// every 3600 seconds
	// Common
	NodeBasicData   *common.NodeBasicData   `protobuf:"bytes,1,opt,name=node_basic_data,json=nodeBasicData,proto3" json:"node_basic_data,omitempty"`
	ServerBasicData *common.ServerBasicData `protobuf:"bytes,2,opt,name=server_basic_data,json=serverBasicData,proto3" json:"server_basic_data,omitempty"`
	Updates         *common.Updates         `protobuf:"bytes,3,opt,name=updates,proto3" json:"updates,omitempty"`
	Security        *common.Security        `protobuf:"bytes,4,opt,name=security,proto3" json:"security,omitempty"`
	// Cardano blockchain
	Epoch     *Epoch     `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	KesData   *KESData   `protobuf:"bytes,6,opt,name=kes_data,json=kesData,proto3" json:"kes_data,omitempty"`
	Blocks    *Blocks    `protobuf:"bytes,7,opt,name=blocks,proto3" json:"blocks,omitempty"`
	StakeInfo *StakeInfo `protobuf:"bytes,8,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info,omitempty"`
	// every 10 seconds
	// Common
	Online      *common.Online      `protobuf:"bytes,9,opt,name=online,proto3" json:"online,omitempty"`
	MemoryState *common.MemoryState `protobuf:"bytes,10,opt,name=memory_state,json=memoryState,proto3" json:"memory_state,omitempty"`
	CpuState    *common.CPUState    `protobuf:"bytes,11,opt,name=cpu_state,json=cpuState,proto3" json:"cpu_state,omitempty"`
	// Cardano blockchain
	NodeState       *NodeState       `protobuf:"bytes,12,opt,name=node_state,json=nodeState,proto3" json:"node_state,omitempty"`
	NodePerformance *NodePerformance `protobuf:"bytes,13,opt,name=node_performance,json=nodePerformance,proto3" json:"node_performance,omitempty"`
}

func (x *Statistic) Reset() {
	*x = Statistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistic) ProtoMessage() {}

func (x *Statistic) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistic.ProtoReflect.Descriptor instead.
func (*Statistic) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{3}
}

func (x *Statistic) GetNodeBasicData() *common.NodeBasicData {
	if x != nil {
		return x.NodeBasicData
	}
	return nil
}

func (x *Statistic) GetServerBasicData() *common.ServerBasicData {
	if x != nil {
		return x.ServerBasicData
	}
	return nil
}

func (x *Statistic) GetUpdates() *common.Updates {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *Statistic) GetSecurity() *common.Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Statistic) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *Statistic) GetKesData() *KESData {
	if x != nil {
		return x.KesData
	}
	return nil
}

func (x *Statistic) GetBlocks() *Blocks {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Statistic) GetStakeInfo() *StakeInfo {
	if x != nil {
		return x.StakeInfo
	}
	return nil
}

func (x *Statistic) GetOnline() *common.Online {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *Statistic) GetMemoryState() *common.MemoryState {
	if x != nil {
		return x.MemoryState
	}
	return nil
}

func (x *Statistic) GetCpuState() *common.CPUState {
	if x != nil {
		return x.CpuState
	}
	return nil
}

func (x *Statistic) GetNodeState() *NodeState {
	if x != nil {
		return x.NodeState
	}
	return nil
}

func (x *Statistic) GetNodePerformance() *NodePerformance {
	if x != nil {
		return x.NodePerformance
	}
	return nil
}

// Epoch - node, rare (every 3600 seconds), node_technical perm
type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{4}
}

func (x *Epoch) GetEpochNumber() int64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

// KES data - node, rare (every 3600 seconds), node_technical perm
type KESData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KesCurrent   int64  `protobuf:"varint,1,opt,name=kes_current,json=kesCurrent,proto3" json:"kes_current,omitempty"`
	KesRemaining int64  `protobuf:"varint,2,opt,name=kes_remaining,json=kesRemaining,proto3" json:"kes_remaining,omitempty"`
	KesExpDate   string `protobuf:"bytes,3,opt,name=kes_exp_date,json=kesExpDate,proto3" json:"kes_exp_date,omitempty"` // ++
}

func (x *KESData) Reset() {
	*x = KESData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KESData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KESData) ProtoMessage() {}

func (x *KESData) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KESData.ProtoReflect.Descriptor instead.
func (*KESData) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{5}
}

func (x *KESData) GetKesCurrent() int64 {
	if x != nil {
		return x.KesCurrent
	}
	return 0
}

func (x *KESData) GetKesRemaining() int64 {
	if x != nil {
		return x.KesRemaining
	}
	return 0
}

func (x *KESData) GetKesExpDate() string {
	if x != nil {
		return x.KesExpDate
	}
	return ""
}

// Blocks - node, rare (every 3600 seconds), node_financial perm
type Blocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockLeader  int64 `protobuf:"varint,1,opt,name=block_leader,json=blockLeader,proto3" json:"block_leader,omitempty"`    // ++ если увеличился, то нужно оповестить
	BlockAdopted int64 `protobuf:"varint,2,opt,name=block_adopted,json=blockAdopted,proto3" json:"block_adopted,omitempty"` // ++
	BlockInvalid int64 `protobuf:"varint,3,opt,name=block_invalid,json=blockInvalid,proto3" json:"block_invalid,omitempty"`
}

func (x *Blocks) Reset() {
	*x = Blocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blocks) ProtoMessage() {}

func (x *Blocks) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blocks.ProtoReflect.Descriptor instead.
func (*Blocks) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{6}
}

func (x *Blocks) GetBlockLeader() int64 {
	if x != nil {
		return x.BlockLeader
	}
	return 0
}

func (x *Blocks) GetBlockAdopted() int64 {
	if x != nil {
		return x.BlockAdopted
	}
	return 0
}

func (x *Blocks) GetBlockInvalid() int64 {
	if x != nil {
		return x.BlockInvalid
	}
	return 0
}

// Stake info -  node, rare (every 3600 seconds), node_financial perm
type StakeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ++
	// отслеживать изменение
	LiveStake   int64 `protobuf:"varint,1,opt,name=live_stake,json=liveStake,proto3" json:"live_stake,omitempty"`
	ActiveStake int64 `protobuf:"varint,2,opt,name=active_stake,json=activeStake,proto3" json:"active_stake,omitempty"`
	Pledge      int64 `protobuf:"varint,3,opt,name=pledge,proto3" json:"pledge,omitempty"`
}

func (x *StakeInfo) Reset() {
	*x = StakeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeInfo) ProtoMessage() {}

func (x *StakeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeInfo.ProtoReflect.Descriptor instead.
func (*StakeInfo) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{7}
}

func (x *StakeInfo) GetLiveStake() int64 {
	if x != nil {
		return x.LiveStake
	}
	return 0
}

func (x *StakeInfo) GetActiveStake() int64 {
	if x != nil {
		return x.ActiveStake
	}
	return 0
}

func (x *StakeInfo) GetPledge() int64 {
	if x != nil {
		return x.Pledge
	}
	return 0
}

// Node state - node, frequent (every 10 seconds), node_technical perm
type NodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipDiff int64   `protobuf:"varint,1,opt,name=tip_diff,json=tipDiff,proto3" json:"tip_diff,omitempty"`
	Density float32 `protobuf:"fixed32,2,opt,name=density,proto3" json:"density,omitempty"`
}

func (x *NodeState) Reset() {
	*x = NodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState) ProtoMessage() {}

func (x *NodeState) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState.ProtoReflect.Descriptor instead.
func (*NodeState) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{8}
}

func (x *NodeState) GetTipDiff() int64 {
	if x != nil {
		return x.TipDiff
	}
	return 0
}

func (x *NodeState) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

// Node performance - node, frequent (every 10 seconds), node_technical perm
type NodePerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessedTx int64 `protobuf:"varint,1,opt,name=processed_tx,json=processedTx,proto3" json:"processed_tx,omitempty"`
	PeersIn     int64 `protobuf:"varint,2,opt,name=peers_in,json=peersIn,proto3" json:"peers_in,omitempty"`
	PeersOut    int64 `protobuf:"varint,3,opt,name=peers_out,json=peersOut,proto3" json:"peers_out,omitempty"`
}

func (x *NodePerformance) Reset() {
	*x = NodePerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_cardano_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePerformance) ProtoMessage() {}

func (x *NodePerformance) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_cardano_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePerformance.ProtoReflect.Descriptor instead.
func (*NodePerformance) Descriptor() ([]byte, []int) {
	return file_cardano_cardano_proto_rawDescGZIP(), []int{9}
}

func (x *NodePerformance) GetProcessedTx() int64 {
	if x != nil {
		return x.ProcessedTx
	}
	return 0
}

func (x *NodePerformance) GetPeersIn() int64 {
	if x != nil {
		return x.PeersIn
	}
	return 0
}

func (x *NodePerformance) GetPeersOut() int64 {
	if x != nil {
		return x.PeersOut
	}
	return 0
}

var File_cardano_cardano_proto protoreflect.FileDescriptor

var file_cardano_cardano_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a, 0x14,
	0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x2f, 0x0a, 0x15, 0x53, 0x61,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xee, 0x04, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x23, 0x0a, 0x08, 0x6b, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x4b, 0x45, 0x53, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6b, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x07, 0x4b, 0x45, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x6b, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6b, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x73, 0x45,
	0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x6f,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x65, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x70, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x70, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22, 0x6c, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x4f, 0x75, 0x74, 0x32, 0x8a, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x12, 0x40, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x15, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x00, 0x42, 0x14, 0x5a, 0x12, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2f,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cardano_cardano_proto_rawDescOnce sync.Once
	file_cardano_cardano_proto_rawDescData = file_cardano_cardano_proto_rawDesc
)

func file_cardano_cardano_proto_rawDescGZIP() []byte {
	file_cardano_cardano_proto_rawDescOnce.Do(func() {
		file_cardano_cardano_proto_rawDescData = protoimpl.X.CompressGZIP(file_cardano_cardano_proto_rawDescData)
	})
	return file_cardano_cardano_proto_rawDescData
}

var file_cardano_cardano_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cardano_cardano_proto_goTypes = []interface{}{
	(*SaveStatisticRequest)(nil),   // 0: SaveStatisticRequest
	(*SaveStatisticResponse)(nil),  // 1: SaveStatisticResponse
	(*GetStatisticRequest)(nil),    // 2: GetStatisticRequest
	(*Statistic)(nil),              // 3: Statistic
	(*Epoch)(nil),                  // 4: Epoch
	(*KESData)(nil),                // 5: KESData
	(*Blocks)(nil),                 // 6: Blocks
	(*StakeInfo)(nil),              // 7: StakeInfo
	(*NodeState)(nil),              // 8: NodeState
	(*NodePerformance)(nil),        // 9: NodePerformance
	(*common.NodeAuthData)(nil),    // 10: common.NodeAuthData
	(*common.NodeBasicData)(nil),   // 11: common.NodeBasicData
	(*common.ServerBasicData)(nil), // 12: common.ServerBasicData
	(*common.Updates)(nil),         // 13: common.Updates
	(*common.Security)(nil),        // 14: common.Security
	(*common.Online)(nil),          // 15: common.Online
	(*common.MemoryState)(nil),     // 16: common.MemoryState
	(*common.CPUState)(nil),        // 17: common.CPUState
}
var file_cardano_cardano_proto_depIdxs = []int32{
	10, // 0: SaveStatisticRequest.node_auth_data:type_name -> common.NodeAuthData
	3,  // 1: SaveStatisticRequest.statistic:type_name -> Statistic
	11, // 2: Statistic.node_basic_data:type_name -> common.NodeBasicData
	12, // 3: Statistic.server_basic_data:type_name -> common.ServerBasicData
	13, // 4: Statistic.updates:type_name -> common.Updates
	14, // 5: Statistic.security:type_name -> common.Security
	4,  // 6: Statistic.epoch:type_name -> Epoch
	5,  // 7: Statistic.kes_data:type_name -> KESData
	6,  // 8: Statistic.blocks:type_name -> Blocks
	7,  // 9: Statistic.stake_info:type_name -> StakeInfo
	15, // 10: Statistic.online:type_name -> common.Online
	16, // 11: Statistic.memory_state:type_name -> common.MemoryState
	17, // 12: Statistic.cpu_state:type_name -> common.CPUState
	8,  // 13: Statistic.node_state:type_name -> NodeState
	9,  // 14: Statistic.node_performance:type_name -> NodePerformance
	0,  // 15: Cardano.SaveStatistic:input_type -> SaveStatisticRequest
	2,  // 16: Cardano.GetStatistic:input_type -> GetStatisticRequest
	1,  // 17: Cardano.SaveStatistic:output_type -> SaveStatisticResponse
	0,  // 18: Cardano.GetStatistic:output_type -> SaveStatisticRequest
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cardano_cardano_proto_init() }
func file_cardano_cardano_proto_init() {
	if File_cardano_cardano_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cardano_cardano_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KESData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_cardano_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cardano_cardano_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cardano_cardano_proto_goTypes,
		DependencyIndexes: file_cardano_cardano_proto_depIdxs,
		MessageInfos:      file_cardano_cardano_proto_msgTypes,
	}.Build()
	File_cardano_cardano_proto = out.File
	file_cardano_cardano_proto_rawDesc = nil
	file_cardano_cardano_proto_goTypes = nil
	file_cardano_cardano_proto_depIdxs = nil
}
