// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notifier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifierConnectClient is the client API for NotifierConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifierConnectClient interface {
	SendNotification(ctx context.Context, in *SendNotifier, opts ...grpc.CallOption) (*ResponseNotifier, error)
}

type notifierConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierConnectClient(cc grpc.ClientConnInterface) NotifierConnectClient {
	return &notifierConnectClient{cc}
}

func (c *notifierConnectClient) SendNotification(ctx context.Context, in *SendNotifier, opts ...grpc.CallOption) (*ResponseNotifier, error) {
	out := new(ResponseNotifier)
	err := c.cc.Invoke(ctx, "/notifier.NotifierConnect/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifierConnectServer is the server API for NotifierConnect service.
// All implementations must embed UnimplementedNotifierConnectServer
// for forward compatibility
type NotifierConnectServer interface {
	SendNotification(context.Context, *SendNotifier) (*ResponseNotifier, error)
	mustEmbedUnimplementedNotifierConnectServer()
}

// UnimplementedNotifierConnectServer must be embedded to have forward compatible implementations.
type UnimplementedNotifierConnectServer struct {
}

func (UnimplementedNotifierConnectServer) SendNotification(context.Context, *SendNotifier) (*ResponseNotifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotifierConnectServer) mustEmbedUnimplementedNotifierConnectServer() {}

// UnsafeNotifierConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierConnectServer will
// result in compilation errors.
type UnsafeNotifierConnectServer interface {
	mustEmbedUnimplementedNotifierConnectServer()
}

func RegisterNotifierConnectServer(s grpc.ServiceRegistrar, srv NotifierConnectServer) {
	s.RegisterService(&NotifierConnect_ServiceDesc, srv)
}

func _NotifierConnect_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierConnectServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifier.NotifierConnect/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierConnectServer).SendNotification(ctx, req.(*SendNotifier))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifierConnect_ServiceDesc is the grpc.ServiceDesc for NotifierConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifierConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.NotifierConnect",
	HandlerType: (*NotifierConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotifierConnect_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
